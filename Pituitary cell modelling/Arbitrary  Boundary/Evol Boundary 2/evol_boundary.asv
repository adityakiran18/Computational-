function [X,Y] =evol_boundary(x,y)
% x and y contain the coordinates of the boundary generated by the contour
% Following algorithm. They are in order of 100. That's why they are scaled
% below.

N0=6; %No.of bodies
Ts=50; %time steps
dt=0.1; %[s]
R0=1e-6;%0.05; [m]
L0=2e-6;
eta=.01; %[Pa s]
mu=-4e-9; %[N/m]
dragc=6*pi*eta*R0;
%k=1e-11;
X=zeros(Ts,N0); %X-coord of the N0 bodies at all the time steps
Y=zeros(Ts,N0); %Y-coord of the N0 bodies at all the time steps


eps=7e-7;% Boundary safe distance from each particle
kboundary=1e-3; %spring constant of Boundary springs
bdsize=ceil(length(x)/2); %no. of boundary pts we pick
Bdpts=zeros(2,bdsize);

xscaled=x*1e-7-mean(x*1e-7);
yscaled=y*1e-7-mean(y*1e-7);
for i=1:bdsize
Bdpts(:,i)=[xscaled(2*i-1) ; yscaled(2*i-1)]; %taking alternate points instead of all.    
end



initx=1.0e-006 *[-3.758    1.883    5.751    6.388    1.1228   -1.073   -4.161    6.184   -7.541   -0.162];
inity=1.0e-006*[ 3.56588  -4.543   -3.434    -1.6943  -4.242   -3.4233  -3.433    -1.243   -1.233   3.535 ];
X(1,:)=initx(1:N0); %x-coordinates for the starting positions
Y(1,:)=inity(1:N0); %y-coordinates for the starting positions


rvect=zeros(1,2); % just a temp vector
Force=zeros(2,N0); % stores the Force [F1  F2  F3...] at each time step.


dx=zeros(N0,N0); % is the difference matrix..contains dx
dy=zeros(N0,N0); % is the difference matrix..contains dy
r=zeros(N0,N0);  % is the magnitude matrix..contains [dx^2 + dy^2]

for k=2:Ts  %for time steps

xk=X(k-1,:); %Storing X(k-1) into a dummy row vector xk to do the repmat thing
yk=Y(k-1,:);%Storing Y(k-1) into a dummy row vector yk to do the repmat thing

dx=repmat(xk,N0,1)-repmat(xk,N0,1)'; % this the X1-X2 difference matrix
dy=repmat(yk,N0,1)-repmat(yk,N0,1)'; % this the Y1-Y2 difference matrix
r=dx.^2+dy.^2;
% dum1=find(r2>(4*R0)^2);
% r2(dum1)=0;
r2=(r<(4*R0)^2).*r;

   
Fx= sum( (r<(4*R0)^2).*dx.*(L0-sqrtr)./(r+(r==0)*1),2);
Fy= sum( (r<(4*R0)^2).*dy.*(L0-r)./(r+(r==0)*1),2);   
   
   
   Boundaryforce=zeros(2,N0); %force on each body by the boundary at each iteration              
    for i=1:N0 %loop for each body i
        F=zeros(1,2); % resets F for each body
        
            %interactions of ith body with all the bodies------------
            for j=1: N0  
                rvect(1,1:2)=r(i,j,1:2);
                lenrvect = norm(rvect,2);
                lenrvect(lenrvect==0) = 1;
                F=F+mu*rvect*(L0-norm(rvect,2))./lenrvect;
            end
            %---------------------------   
    
    tempforce=[0 ; 0];
    for n=1:bdsize %Boundary force on ith body
        db=[X(k-1,i); Y(k-1,i)] -Bdpts(:,n); %dist vector joining  nth Boundary pt to the ith body
        if(norm(db,'fro')<eps)
           tempforce= tempforce + (kboundary)* db; % Actually divided by norm(db), but it gets cancelled 
          %fprintf('\n %g th body (%g,%g) near boundary (%g,%g) at %g th step with dist=%g\n',i,X(k-1,i), Y(k-1,i),Bdpts(1,n),Bdpts(2,n),k,norm(db,'fro'));
           %cnt=cnt+1;
        end
        
    end
     Boundaryforce(:,i)=tempforce;       
            
    Force(:,i)=F; %Stores the computed force F into F(i)
    end %---------------------------   
    

    X(k,:)=X(k-1,:)+ Force(1,:)*dt/(dragc)+ Boundaryforce(1,:)+ 1e-7*sqrt(dt)*randn(1,N0);
    Y(k,:)=Y(k-1,:)+ Force(2,:)*dt/(dragc)+ Boundaryforce(2,:)+1e-7*sqrt(dt)*randn(1,N0);
    

end

% %-----------------------for plotting the balls
        t=-pi:0.01:pi;
        randcol=[1 0 1; 1 0 0; 0 1 0; 0 0 0; 0 0 1; 1 1 0];
        %magenta, red, green, black, blue, yellow
        
           for k=1:Ts
                for i=1:N0
                plot(X(k,i)+R0*cos(t),Y(k,i)+R0*sin(t),'color',randcol(mod(i,N0+1),:),'linewidth',5);
                hold on
                plot(X(k,i),Y(k,i),'x','color','black','linewidth',5); hold on 
                title(['This is time step: ',num2str(k+1),'/',num2str(Ts)]);
                plot(Bdpts(1,:),Bdpts(2,:),'*');
                grid on;
                hold on
                end
            pause(0.090);
            hold off
           end
%-----------------------for plotting the balls
end
