function [X,Y] =evol_boundary_compact(x1,y1,N0,Ts)
% x1 and y1 contain the coordinates of the boundary generated by the contour
% Following algorithm. 

% N0=20; %No.of bodies
%Ts=100; %time steps
dt=0.1; %[s]
R0=1e-6;%0.05; [m]
L0=2e-6;
eta=.01; %[Pa s]
mu=-4e-11; %[N/m]
dragc=6*pi*eta*R0;
%k=1e-11;
X=zeros(Ts,N0); %X-coord of the N0 bodies at all the time steps
Y=zeros(Ts,N0); %Y-coord of the N0 bodies at all the time steps

eps=1.5e-6;% Boundary safe distance from each particle
kboundary=1e-3; %spring constant of Boundary springs
bdsize=ceil(length(x1)/2); %no. of boundary pts we pick
Bdpts=zeros(2,bdsize);

for i=1:bdsize
Bdpts(:,i)=[x1(2*i-1) ; y1(2*i-1)]; %taking alternate points instead of all.    
end
load('initial.mat');

tempx=x1(round(linspace(1,187,N0)')); % I used inspace instead of the range operator
tempy=y1(round(linspace(1,187,N0)'));
X(1,:)=0.75*tempx; %Now scaling them so that they don't coincide with the boundary pts
Y(1,:)=0.75*tempy; %Now Scaling them so that they don't coincide with the boundary pts

%dx=zeros(N0,N0); % is the difference matrix..contains dx
%dy=zeros(N0,N0); % is the difference matrix..contains dy
%r=zeros(N0,N0);  % is the magnitude matrix..contains sqrt[dx^2 + dy^2]
%--------------------------------------------------------------------------
for k=2:Ts  %for time steps

%Cell Force:    
    xk=X(k-1,:); %Storing X(k-1) into a dummy row vector xk to do the repmat thing
    yk=Y(k-1,:);%Storing Y(k-1) into a dummy row vector yk to do the repmat thing

    dx=repmat(xk,N0,1)'-repmat(xk,N0,1); % this the X1-X2 difference matrix
    dy=repmat(yk,N0,1)'-repmat(yk,N0,1); % this the Y1-Y2 difference matrix
    r=sqrt(dx.^2+dy.^2);

    Fx= mu*sum( (r<4*R0).*dx.*(L0-r)./(r+(r==0)*1),   2);   %Contains the forces Fx on all N0 bodies at the kth time step
    Fy= mu*sum( (r<4*R0).*dy.*(L0-r)./(r+(r==0)*1),   2);   %Contains the forces Fy on all N0s bodies at the kth time step

%------------------------------------
%boundary Force:
    bxk=Bdpts(1,:);
    byk=Bdpts(2,:);

    bdx=repmat(xk,bdsize,1)'-repmat(bxk,N0,1);  % this the Xi-BXj difference matrix
    bdy=repmat(yk,bdsize,1)'-repmat(byk,N0,1);  % this the Yi-BYj difference matrix
    rb=sqrt(bdx.^2+bdy.^2);

    BFx= kboundary*sum( (rb<eps).*bdx ,2);
    BFy= kboundary*sum( (rb<eps).*bdy ,2);
%-----------------------------------                

%Summing
    X(k,:)=X(k-1,:)+ Fx'*dt/(dragc)  + BFx(1,:)+   1e-7*sqrt(dt)*randn(1,N0);
    Y(k,:)=Y(k-1,:)+ Fy'*dt/(dragc)  + BFy(2,:)+  1e-7*sqrt(dt)*randn(1,N0);

end
%--------------------------------------------------------------------------


% %-----------------------for plotting the balls
        t=-pi:0.01:pi;
        randcol=[1 0 1; 1 0 0; 0 1 0; 0 0 0; 0 0 1; 1 1 0];
        %magenta, red, green, black, blue, yellow
        
           for k=1:Ts
                for i=1:N0
                axis([-8e-6  8e-6  -5e-6  5e-6]);     hold on
                plot(X(k,i)+R0*cos(t),Y(k,i)+R0*sin(t),'color',randcol(mod(i,6)+1,:),'linewidth',5); hold on
                plot(X(k,i),Y(k,i),'.','color','black','linewidth',2); hold on 
                title(['This is time step: ',num2str(k+1),'/',num2str(Ts)]); hold on
                plot(Bdpts(1,:),Bdpts(2,:),'*'); hold on
                grid on;
                hold on
                end
            pause(0.100);
            hold off
           
           end
% -----------------------for plotting the balls
end
